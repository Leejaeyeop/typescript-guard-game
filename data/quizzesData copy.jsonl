{ "id": 1, "difficultyLevel":"BEGINNER", "question": "type Foo = string\nconst foo:Foo = 123", "explanation": }
{ "id": 2, "difficultyLevel":"BEGINNER", "question": "const foo: number = 123;" }
{ "id": 3, "difficultyLevel":"BEGINNER", "question": "const foo: string | number = 123;" }
{ "id": 4, "difficultyLevel":"BEGINNER", "question": "const foo: string & number = 123;" }
{ "id": 5, "difficultyLevel":"BEGINNER", "question": "let count: number = 'one';" }
{ "id": 6, "difficultyLevel":"BEGINNER", "question": "let input: unknown = \"hello\";\r\nconsole.log(input.toUpperCase());" }
{ "id": 7, "difficultyLevel":"INTERMEDIATE", "question":"function greet(user: { name: string; age?: number }) {\r\n  console.log(`Hello, ${user.name}. You are ${user.age.toFixed(0)} years old.`);\r\n}\r\n\r\ngreet({ name: \"Bob\" });"}
{ "id": 8, "difficultyLevel":"INTERMEDIATE", "question":"interface User {\r\n  name?: string;\r\n}\r\n\r\nconst person = {\r\n  name: \"Lee\"\r\n} satisfies User\r\n\r\nconsole.log(person.name.charAt(0)); // expected: L"}
{ "id": 9, "difficultyLevel":"INTERMEDIATE", "question": "type Config<T extends string> = T extends \"dev\" | \"prod\"\r\n  ? { mode: T; debug: boolean }\r\n  : never;\r\n\r\nconst config: Config<\"test\"> = {\r\n  mode: \"test\",\r\n  debug: true,\r\n};\r\n"}
{ "id": 10, "difficultyLevel":"INTERMEDIATE", "question": "type Animal = { type: \"dog\"; bark: () => void } | { type: \"cat\"; meow: () => void };\r\n\r\nfunction makeSound(animal: Animal) {\r\n  if (animal.type === \"dog\") {\r\n    animal.bark();\r\n  } else {\r\n    animal.meow();\r\n  }\r\n}\r\n\r\nconst myPet: Animal = { type: \"dog\", meow: () => console.log(\"Woof?\") };\r\nmakeSound(myPet);"}
{ "id": 11, "difficultyLevel":"INTERMEDIATE", "question": "function double(value: number | string) {\r\n  return value * 2;\r\n}\r\ndouble(\"5\");\r\n"}
{ "id": 12, "difficultyLevel":"EXPERT", "question": "function processData<T extends { id: string }>(data: T[]): T | undefined {\r\n  return data.find(item => item.id === '123');\r\n}\r\n\r\nconst result = processData([{ id: '456' }, { name: 'test' }]);\r\nconsole.log(result.id); // expected: (property 'id' of the found object)" }
{ "id": 13, "difficultyLevel":"EXPERT", "question": "type Flatten<T> = T extends any[] ? T[number] : T;\r\n\r\nfunction logItem(item: Flatten<string[] | number[]>) {\r\n    console.log(item);\r\n}\r\n\r\nlogItem(\"hello\"); // expected: \"hello\"\r\nlogItem(123); \r\nlogItem(true);" }
{ "id": 14, "difficultyLevel":"EXPERT", "question": "function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {\r\n  return obj[key];\r\n}\r\n\r\nconst obj = { a: 1, b: \"2\", c: true };\r\n\r\nconst a = getProperty(obj, \"a\"); // a's type is inferred as 'number'\r\nconst d = getProperty(obj, \"d\"); // 'd' is not a key of obj" }
{ "id": 15, "difficultyLevel":"EXPERT", "question": "type Unbox<T> = T extends { value: infer U } ? U : T;\r\n\r\nfunction processValue<T>(input: T): Unbox<T> {\r\n  if (typeof input === 'object' && input !== null && 'value' in input) {\r\n    return (input as any).value;\r\n  }\r\n  return input as Unbox<T>;\r\n}\r\n\r\nconst text = processValue({ value: \"hello\" });\r\n\r\nconsole.log(text.toUpperCase()); // expected: \"HELLO\"" }
{ "id": 1, "difficultyLevel":"", "explanation":"" , "question":""}


{ "id": 2, "difficultyLevel":"BEGINNER", "explanation": "Because age is an optional (?) property, it may not exist in the User type object. The user object has an undefined value because no age is assigned. Calling the .toFixed() method to undefined results in a runtime error (TypeError: Cannot read properties of undefined). TypeScript notifies you that this code may cause a runtime error when the strictNullChecks option is turned on, causing a compilation error.", "question":"interface User {\r\n  name: string;\r\n  age?: number; // age\uB294 \uC120\uD0DD\uC801 \uD504\uB85C\uD37C\uD2F0\r\n}\r\n\r\nconst user: User = { name: \"Alice\" };\r\n\r\nconsole.log(user.age.toFixed(1));"}
