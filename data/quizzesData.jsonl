{"id":0,"difficultyLevel":"BEGINNER","explanation":"The greet function is defined to take the name factor of the string type","question":"function greet(name: string) {\r\n  console.log(`Hello, ${name.toUpperCase()}`);\r\n}\r\n\r\ngreet(42);","answer":false}
{"id":0,"difficultyLevel":"BEGINNER","explanation":"Because age is an optional (?) property, it may not exist in the User type object. The user object has an undefined value because no age is assigned. Calling the .toFixed() method to undefined results in a runtime error (TypeError: Cannot read properties of undefined). TypeScript notifies you that this code may cause a runtime error when the strictNullChecks option is turned on, causing a compilation error.","question":"interface User {\r\n  name: string;\r\n  age?: number; \r\n}\r\n\r\nconst user: User = { name: \"Alice\" };\r\n\r\nconsole.log(user.age.toFixed(1));","answer":false}
{"id":0,"difficultyLevel":"INTERMEDIATE","explanation":"The animal parameter is a union type that can be Dog or Cat. TypeScript does not allow access unless it is a common property that exists for both types, since we are not sure whether the animal is Dog or Cat. A compilation error occurs because bar exists only for Dog. To resolve this, we need to narrow down the type using a type guard such as if('bark' in animal).","question":"interface Dog {\r\n  bark(): void;\r\n}\r\n\r\ninterface Cat {\r\n  meow(): void;\r\n}\r\n\r\nfunction makeSound(animal: Dog | Cat) {\r\n  animal.bark();\r\n}","answer":false}
{"id":0,"difficultyLevel":"INTERMEDIATE","explanation":"Readon is a utility type of utility type of T.The point object was declared as readonly으로 type, because x and y profile cannot be modified.","question":"type Point = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\nconst point: Readonly<Point> = { x: 10, y: 20 };\r\n\r\npoint.x = 15;","answer":false}